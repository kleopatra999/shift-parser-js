/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var ErrorMessages = {
  UNEXPECTED_TOKEN: "Unexpected token {0}",
  UNEXPECTED_ILLEGAL_TOKEN: "Unexpected {0}",
  UNEXPECTED_NUMBER: "Unexpected number",
  UNEXPECTED_STRING: "Unexpected string",
  UNEXPECTED_IDENTIFIER: "Unexpected identifier",
  UNEXPECTED_RESERVED_WORD: "Unexpected reserved word",
  UNEXPECTED_EOS: "Unexpected end of input",
  UNEXPECTED_LINE_TERMINATOR: "Unexpected line terminator",
  NEWLINE_AFTER_THROW: "Illegal newline after throw",
  UNTERMINATED_REGEXP: "Invalid regular expression: missing /",
  INVALID_REGEXP_FLAGS: "Invalid regular expression flags",
  INVALID_LHS_IN_ASSIGNMENT: "Invalid left-hand side in assignment",
  INVALID_LHS_IN_FOR_IN: "Invalid left-hand side in for-in",
  INVALID_LHS_IN_FOR_OF: "Invalid left-hand side in for-of",
  MULTIPLE_DEFAULTS_IN_SWITCH: "More than one default clause in switch statement",
  NO_CATCH_OR_FINALLY: "Missing catch or finally after try",
  ILLEGAL_ARROW_FUNCTION_PARAMS: "Illegal arrow function parameter list",
  INVALID_VAR_INIT_FOR_IN: "Invalid variable declaration in for-in statement",
  INVALID_VAR_INIT_FOR_OF: "Invalid variable declaration in for-of statement",
  ILLEGAL_PROPERTY: "Illegal property initializer" };
exports.ErrorMessages = ErrorMessages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lcnJvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JPLElBQU0sYUFBYSxHQUFHO0FBQzNCLGtCQUFnQixFQUFFLHNCQUFzQjtBQUN4QywwQkFBd0IsRUFBRSxnQkFBZ0I7QUFDMUMsbUJBQWlCLEVBQUUsbUJBQW1CO0FBQ3RDLG1CQUFpQixFQUFFLG1CQUFtQjtBQUN0Qyx1QkFBcUIsRUFBRSx1QkFBdUI7QUFDOUMsMEJBQXdCLEVBQUUsMEJBQTBCO0FBQ3BELGdCQUFjLEVBQUUseUJBQXlCO0FBQ3pDLDRCQUEwQixFQUFFLDRCQUE0QjtBQUN4RCxxQkFBbUIsRUFBRSw2QkFBNkI7QUFDbEQscUJBQW1CLEVBQUUsdUNBQXVDO0FBQzVELHNCQUFvQixFQUFFLGtDQUFrQztBQUN4RCwyQkFBeUIsRUFBRSxzQ0FBc0M7QUFDakUsdUJBQXFCLEVBQUUsa0NBQWtDO0FBQ3pELHVCQUFxQixFQUFFLGtDQUFrQztBQUN6RCw2QkFBMkIsRUFBRSxrREFBa0Q7QUFDL0UscUJBQW1CLEVBQUUsb0NBQW9DO0FBQ3pELCtCQUE2QixFQUFFLHVDQUF1QztBQUN0RSx5QkFBdUIsRUFBRSxrREFBa0Q7QUFDM0UseUJBQXVCLEVBQUUsa0RBQWtEO0FBQzNFLGtCQUFnQixFQUFFLDhCQUE4QixFQUNqRCxDQUFDO1FBckJXLGFBQWEsR0FBYixhQUFhIiwiZmlsZSI6InNyYy9lcnJvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IFNoYXBlIFNlY3VyaXR5LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKVxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNvbnN0IEVycm9yTWVzc2FnZXMgPSB7XG4gIFVORVhQRUNURURfVE9LRU46IFwiVW5leHBlY3RlZCB0b2tlbiB7MH1cIixcbiAgVU5FWFBFQ1RFRF9JTExFR0FMX1RPS0VOOiBcIlVuZXhwZWN0ZWQgezB9XCIsXG4gIFVORVhQRUNURURfTlVNQkVSOiBcIlVuZXhwZWN0ZWQgbnVtYmVyXCIsXG4gIFVORVhQRUNURURfU1RSSU5HOiBcIlVuZXhwZWN0ZWQgc3RyaW5nXCIsXG4gIFVORVhQRUNURURfSURFTlRJRklFUjogXCJVbmV4cGVjdGVkIGlkZW50aWZpZXJcIixcbiAgVU5FWFBFQ1RFRF9SRVNFUlZFRF9XT1JEOiBcIlVuZXhwZWN0ZWQgcmVzZXJ2ZWQgd29yZFwiLFxuICBVTkVYUEVDVEVEX0VPUzogXCJVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dFwiLFxuICBVTkVYUEVDVEVEX0xJTkVfVEVSTUlOQVRPUjogXCJVbmV4cGVjdGVkIGxpbmUgdGVybWluYXRvclwiLFxuICBORVdMSU5FX0FGVEVSX1RIUk9XOiBcIklsbGVnYWwgbmV3bGluZSBhZnRlciB0aHJvd1wiLFxuICBVTlRFUk1JTkFURURfUkVHRVhQOiBcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uOiBtaXNzaW5nIC9cIixcbiAgSU5WQUxJRF9SRUdFWFBfRkxBR1M6IFwiSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ3NcIixcbiAgSU5WQUxJRF9MSFNfSU5fQVNTSUdOTUVOVDogXCJJbnZhbGlkIGxlZnQtaGFuZCBzaWRlIGluIGFzc2lnbm1lbnRcIixcbiAgSU5WQUxJRF9MSFNfSU5fRk9SX0lOOiBcIkludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gZm9yLWluXCIsXG4gIElOVkFMSURfTEhTX0lOX0ZPUl9PRjogXCJJbnZhbGlkIGxlZnQtaGFuZCBzaWRlIGluIGZvci1vZlwiLFxuICBNVUxUSVBMRV9ERUZBVUxUU19JTl9TV0lUQ0g6IFwiTW9yZSB0aGFuIG9uZSBkZWZhdWx0IGNsYXVzZSBpbiBzd2l0Y2ggc3RhdGVtZW50XCIsXG4gIE5PX0NBVENIX09SX0ZJTkFMTFk6IFwiTWlzc2luZyBjYXRjaCBvciBmaW5hbGx5IGFmdGVyIHRyeVwiLFxuICBJTExFR0FMX0FSUk9XX0ZVTkNUSU9OX1BBUkFNUzogXCJJbGxlZ2FsIGFycm93IGZ1bmN0aW9uIHBhcmFtZXRlciBsaXN0XCIsXG4gIElOVkFMSURfVkFSX0lOSVRfRk9SX0lOOiBcIkludmFsaWQgdmFyaWFibGUgZGVjbGFyYXRpb24gaW4gZm9yLWluIHN0YXRlbWVudFwiLFxuICBJTlZBTElEX1ZBUl9JTklUX0ZPUl9PRjogXCJJbnZhbGlkIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIGZvci1vZiBzdGF0ZW1lbnRcIixcbiAgSUxMRUdBTF9QUk9QRVJUWTogXCJJbGxlZ2FsIHByb3BlcnR5IGluaXRpYWxpemVyXCIsXG59O1xuIl19